/***************************************************************************
 *            cashutil.h
 *
 *  Sun Apr 17 17:56:17 2005
 *  Copyright  2005  Neil Williams
 *  linux@codehelp.co.uk
 ****************************************************************************/

/*
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#ifndef _CASHUTIL_H
#define _CASHUTIL_H

#include "qof-main.h"

#define CU_MOD_CLI "cashutil-cli"

/** @addtogroup cashutil
    @{ */

/** @file cashutil.h
  @brief Command line interface to GnuCash data
  @author Copyright (c) 2005 Neil Williams <linux@codehelp.co.uk>
*/

#define QOF_LIB_DIR "@QOF_LIB_DIR@"
#include "config.h"

/* gnc_setenv() papers over the brokenness of of systems that only
 * have putenv() which takes ownership of the pointer you give it,
 * making it *very* difficult, if not impossible to avoid memory
 * leaks.  Note that right now, on systems that have setenv, this is
 * just setenv, and on other systems, we just leave the memory leak.
 * Later, we may try to make things a little better by keeping track
 * of the pointers we call putenv on in a hash table and if someone
 * calls gnc_setenv on an envt var that we've previously set, then
 * we'll free it after the change.  However, given the sloppy
 * semantics (or docs) for putenv, it's not even clear that this is
 * OK, since it's not clear that people aren't allowed to keep the
 * pointer from getenv around, as long as they don't try to modify
 * it... <shrug> */
#ifdef HAVE_SETENV

#define gnc_setenv setenv
#define gnc_unsetenv unsetenv

#elif defined HAVE_PUTENV

int gnc_setenv(const char *name, const char *value, int overwrite);
int gnc_unsetenv(const char *name);

#else
#error "Must have setenv or putenv."
#endif


/** @} */
/** @} */

#endif /* _PILOT_QOF_H */
